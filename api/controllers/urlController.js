const { nanoid } = require('nanoid');\nconst { supabase } = require('../config/supabase');\nconst { AppError } = require('../middleware/errorHandler');\nconst { asyncHandler } = require('../middleware/errorHandler');\nconst { validateUrl } = require('../middleware/security');\nconst logger = require('../utils/logger');\n\n// Create a new shortened URL\nconst createUrl = asyncHandler(async (req, res) => {\n  const { originalUrl, customCode, title, description, expiresAt } = req.body;\n  \n  // Validate URL\n  if (!validateUrl(originalUrl)) {\n    throw new AppError('Invalid URL or blocked domain', 400);\n  }\n  \n  const shortCode = customCode || nanoid(8);\n  \n  try {\n    // Check if custom code already exists\n    if (customCode) {\n      const { data: existing } = await supabase\n        .from('urls')\n        .select('id')\n        .eq('short_code', customCode)\n        .single();\n      \n      if (existing) {\n        throw new AppError('Custom code already exists', 409);\n      }\n    }\n    \n    // Create URL record\n    const { data, error } = await supabase\n      .from('urls')\n      .insert({\n        user_id: req.user.id,\n        original_url: originalUrl,\n        short_code: shortCode,\n        title: title || null,\n        description: description || null,\n        expires_at: expiresAt || null,\n        is_active: true,\n        clicks: 0,\n        leads: 0\n      })\n      .select()\n      .single();\n    \n    if (error) {\n      throw error;\n    }\n    \n    res.status(201).json({\n      success: true,\n      message: 'URL created successfully',\n      url: data\n    });\n  } catch (error) {\n    logger.error('Create URL error:', error);\n    if (error.code === '23505') {\n      throw new AppError('Short code already exists', 409);\n    }\n    throw new AppError('Failed to create URL', 500);\n  }\n});\n\n// Get user's URLs\nconst getUserUrls = asyncHandler(async (req, res) => {\n  try {\n    const { data: urls, error } = await supabase\n      .from('urls')\n      .select('*')\n      .eq('user_id', req.user.id)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      throw error;\n    }\n\n    res.json({ \n      success: true,\n      urls: urls || [] \n    });\n  } catch (error) {\n    logger.error('Get URLs error:', error);\n    throw new AppError('Failed to get URLs', 500);\n  }\n});\n\n// Get URL analytics\nconst getUrlAnalytics = asyncHandler(async (req, res) => {\n  const { id } = req.params;\n  \n  try {\n    // Get URL data\n    const { data: url, error: urlError } = await supabase\n      .from('urls')\n      .select('*')\n      .eq('id', id)\n      .eq('user_id', req.user.id)\n      .single();\n    \n    if (urlError || !url) {\n      throw new AppError('URL not found', 404);\n    }\n    \n    // Get analytics data\n    const { data: analytics, error: analyticsError } = await supabase\n      .from('analytics')\n      .select('*')\n      .eq('url_id', id)\n      .order('created_at', { ascending: false });\n    \n    if (analyticsError) {\n      throw analyticsError;\n    }\n    \n    res.json({\n      success: true,\n      url,\n      analytics: analytics || []\n    });\n  } catch (error) {\n    logger.error('Get URL analytics error:', error);\n    throw new AppError('Failed to get URL analytics', 500);\n  }\n});\n\n// Update URL\nconst updateUrl = asyncHandler(async (req, res) => {\n  const { id } = req.params;\n  const { title, description, isActive } = req.body;\n  \n  try {\n    const { data, error } = await supabase\n      .from('urls')\n      .update({\n        title,\n        description,\n        is_active: isActive,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', id)\n      .eq('user_id', req.user.id)\n      .select()\n      .single();\n    \n    if (error) {\n      throw error;\n    }\n    \n    if (!data) {\n      throw new AppError('URL not found', 404);\n    }\n    \n    res.json({\n      success: true,\n      message: 'URL updated successfully',\n      url: data\n    });\n  } catch (error) {\n    logger.error('Update URL error:', error);\n    throw new AppError('Failed to update URL', 500);\n  }\n});\n\n// Delete URL\nconst deleteUrl = asyncHandler(async (req, res) => {\n  const { id } = req.params;\n  \n  try {\n    const { error } = await supabase\n      .from('urls')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', req.user.id);\n    \n    if (error) {\n      throw error;\n    }\n    \n    res.json({\n      success: true,\n      message: 'URL deleted successfully'\n    });\n  } catch (error) {\n    logger.error('Delete URL error:', error);\n    throw new AppError('Failed to delete URL', 500);\n  }\n});\n\nmodule.exports = {\n  createUrl,\n  getUserUrls,\n  getUrlAnalytics,\n  updateUrl,\n  deleteUrl\n};